/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Flowchart as PrismaFlowchart,
  Topic as PrismaTopic,
} from "@prisma/client";

export class FlowchartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FlowchartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.flowchart.count(args);
  }

  async flowcharts(
    args: Prisma.FlowchartFindManyArgs
  ): Promise<PrismaFlowchart[]> {
    return this.prisma.flowchart.findMany(args);
  }
  async flowchart(
    args: Prisma.FlowchartFindUniqueArgs
  ): Promise<PrismaFlowchart | null> {
    return this.prisma.flowchart.findUnique(args);
  }
  async createFlowchart(
    args: Prisma.FlowchartCreateArgs
  ): Promise<PrismaFlowchart> {
    return this.prisma.flowchart.create(args);
  }
  async updateFlowchart(
    args: Prisma.FlowchartUpdateArgs
  ): Promise<PrismaFlowchart> {
    return this.prisma.flowchart.update(args);
  }
  async deleteFlowchart(
    args: Prisma.FlowchartDeleteArgs
  ): Promise<PrismaFlowchart> {
    return this.prisma.flowchart.delete(args);
  }

  async getTopic(parentId: string): Promise<PrismaTopic | null> {
    return this.prisma.flowchart
      .findUnique({
        where: { id: parentId },
      })
      .topic();
  }
}
