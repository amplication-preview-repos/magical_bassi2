/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FlowchartService } from "../flowchart.service";
import { FlowchartCreateInput } from "./FlowchartCreateInput";
import { Flowchart } from "./Flowchart";
import { FlowchartFindManyArgs } from "./FlowchartFindManyArgs";
import { FlowchartWhereUniqueInput } from "./FlowchartWhereUniqueInput";
import { FlowchartUpdateInput } from "./FlowchartUpdateInput";

export class FlowchartControllerBase {
  constructor(protected readonly service: FlowchartService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Flowchart })
  async createFlowchart(
    @common.Body() data: FlowchartCreateInput
  ): Promise<Flowchart> {
    return await this.service.createFlowchart({
      data: {
        ...data,

        topic: data.topic
          ? {
              connect: data.topic,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Flowchart] })
  @ApiNestedQuery(FlowchartFindManyArgs)
  async flowcharts(@common.Req() request: Request): Promise<Flowchart[]> {
    const args = plainToClass(FlowchartFindManyArgs, request.query);
    return this.service.flowcharts({
      ...args,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Flowchart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async flowchart(
    @common.Param() params: FlowchartWhereUniqueInput
  ): Promise<Flowchart | null> {
    const result = await this.service.flowchart({
      where: params,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Flowchart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFlowchart(
    @common.Param() params: FlowchartWhereUniqueInput,
    @common.Body() data: FlowchartUpdateInput
  ): Promise<Flowchart | null> {
    try {
      return await this.service.updateFlowchart({
        where: params,
        data: {
          ...data,

          topic: data.topic
            ? {
                connect: data.topic,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          diagramContent: true,
          id: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Flowchart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFlowchart(
    @common.Param() params: FlowchartWhereUniqueInput
  ): Promise<Flowchart | null> {
    try {
      return await this.service.deleteFlowchart({
        where: params,
        select: {
          createdAt: true,
          diagramContent: true,
          id: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
