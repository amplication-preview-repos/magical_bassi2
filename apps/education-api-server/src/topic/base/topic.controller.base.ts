/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TopicService } from "../topic.service";
import { TopicCreateInput } from "./TopicCreateInput";
import { Topic } from "./Topic";
import { TopicFindManyArgs } from "./TopicFindManyArgs";
import { TopicWhereUniqueInput } from "./TopicWhereUniqueInput";
import { TopicUpdateInput } from "./TopicUpdateInput";
import { FlowchartFindManyArgs } from "../../flowchart/base/FlowchartFindManyArgs";
import { Flowchart } from "../../flowchart/base/Flowchart";
import { FlowchartWhereUniqueInput } from "../../flowchart/base/FlowchartWhereUniqueInput";
import { NoteFindManyArgs } from "../../note/base/NoteFindManyArgs";
import { Note } from "../../note/base/Note";
import { NoteWhereUniqueInput } from "../../note/base/NoteWhereUniqueInput";
import { UmlDiagramFindManyArgs } from "../../umlDiagram/base/UmlDiagramFindManyArgs";
import { UmlDiagram } from "../../umlDiagram/base/UmlDiagram";
import { UmlDiagramWhereUniqueInput } from "../../umlDiagram/base/UmlDiagramWhereUniqueInput";

export class TopicControllerBase {
  constructor(protected readonly service: TopicService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Topic })
  async createTopic(@common.Body() data: TopicCreateInput): Promise<Topic> {
    return await this.service.createTopic({
      data: {
        ...data,

        unit: data.unit
          ? {
              connect: data.unit,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Topic] })
  @ApiNestedQuery(TopicFindManyArgs)
  async topics(@common.Req() request: Request): Promise<Topic[]> {
    const args = plainToClass(TopicFindManyArgs, request.query);
    return this.service.topics({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Topic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async topic(
    @common.Param() params: TopicWhereUniqueInput
  ): Promise<Topic | null> {
    const result = await this.service.topic({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Topic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTopic(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() data: TopicUpdateInput
  ): Promise<Topic | null> {
    try {
      return await this.service.updateTopic({
        where: params,
        data: {
          ...data,

          unit: data.unit
            ? {
                connect: data.unit,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Topic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTopic(
    @common.Param() params: TopicWhereUniqueInput
  ): Promise<Topic | null> {
    try {
      return await this.service.deleteTopic({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/flowcharts")
  @ApiNestedQuery(FlowchartFindManyArgs)
  async findFlowcharts(
    @common.Req() request: Request,
    @common.Param() params: TopicWhereUniqueInput
  ): Promise<Flowchart[]> {
    const query = plainToClass(FlowchartFindManyArgs, request.query);
    const results = await this.service.findFlowcharts(params.id, {
      ...query,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/flowcharts")
  async connectFlowcharts(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: FlowchartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowcharts: {
        connect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/flowcharts")
  async updateFlowcharts(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: FlowchartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowcharts: {
        set: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/flowcharts")
  async disconnectFlowcharts(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: FlowchartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowcharts: {
        disconnect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notes")
  @ApiNestedQuery(NoteFindManyArgs)
  async findNotes(
    @common.Req() request: Request,
    @common.Param() params: TopicWhereUniqueInput
  ): Promise<Note[]> {
    const query = plainToClass(NoteFindManyArgs, request.query);
    const results = await this.service.findNotes(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notes")
  async connectNotes(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        connect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notes")
  async updateNotes(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        set: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notes")
  async disconnectNotes(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        disconnect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/umlDiagrams")
  @ApiNestedQuery(UmlDiagramFindManyArgs)
  async findUmlDiagrams(
    @common.Req() request: Request,
    @common.Param() params: TopicWhereUniqueInput
  ): Promise<UmlDiagram[]> {
    const query = plainToClass(UmlDiagramFindManyArgs, request.query);
    const results = await this.service.findUmlDiagrams(params.id, {
      ...query,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/umlDiagrams")
  async connectUmlDiagrams(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: UmlDiagramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      umlDiagrams: {
        connect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/umlDiagrams")
  async updateUmlDiagrams(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: UmlDiagramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      umlDiagrams: {
        set: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/umlDiagrams")
  async disconnectUmlDiagrams(
    @common.Param() params: TopicWhereUniqueInput,
    @common.Body() body: UmlDiagramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      umlDiagrams: {
        disconnect: body,
      },
    };
    await this.service.updateTopic({
      where: params,
      data,
      select: { id: true },
    });
  }
}
