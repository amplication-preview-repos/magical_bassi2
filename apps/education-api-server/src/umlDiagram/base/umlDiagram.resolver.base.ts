/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UmlDiagram } from "./UmlDiagram";
import { UmlDiagramCountArgs } from "./UmlDiagramCountArgs";
import { UmlDiagramFindManyArgs } from "./UmlDiagramFindManyArgs";
import { UmlDiagramFindUniqueArgs } from "./UmlDiagramFindUniqueArgs";
import { CreateUmlDiagramArgs } from "./CreateUmlDiagramArgs";
import { UpdateUmlDiagramArgs } from "./UpdateUmlDiagramArgs";
import { DeleteUmlDiagramArgs } from "./DeleteUmlDiagramArgs";
import { Topic } from "../../topic/base/Topic";
import { UmlDiagramService } from "../umlDiagram.service";
@graphql.Resolver(() => UmlDiagram)
export class UmlDiagramResolverBase {
  constructor(protected readonly service: UmlDiagramService) {}

  async _umlDiagramsMeta(
    @graphql.Args() args: UmlDiagramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UmlDiagram])
  async umlDiagrams(
    @graphql.Args() args: UmlDiagramFindManyArgs
  ): Promise<UmlDiagram[]> {
    return this.service.umlDiagrams(args);
  }

  @graphql.Query(() => UmlDiagram, { nullable: true })
  async umlDiagram(
    @graphql.Args() args: UmlDiagramFindUniqueArgs
  ): Promise<UmlDiagram | null> {
    const result = await this.service.umlDiagram(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UmlDiagram)
  async createUmlDiagram(
    @graphql.Args() args: CreateUmlDiagramArgs
  ): Promise<UmlDiagram> {
    return await this.service.createUmlDiagram({
      ...args,
      data: {
        ...args.data,

        topic: args.data.topic
          ? {
              connect: args.data.topic,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UmlDiagram)
  async updateUmlDiagram(
    @graphql.Args() args: UpdateUmlDiagramArgs
  ): Promise<UmlDiagram | null> {
    try {
      return await this.service.updateUmlDiagram({
        ...args,
        data: {
          ...args.data,

          topic: args.data.topic
            ? {
                connect: args.data.topic,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UmlDiagram)
  async deleteUmlDiagram(
    @graphql.Args() args: DeleteUmlDiagramArgs
  ): Promise<UmlDiagram | null> {
    try {
      return await this.service.deleteUmlDiagram(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Topic, {
    nullable: true,
    name: "topic",
  })
  async getTopic(@graphql.Parent() parent: UmlDiagram): Promise<Topic | null> {
    const result = await this.service.getTopic(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
