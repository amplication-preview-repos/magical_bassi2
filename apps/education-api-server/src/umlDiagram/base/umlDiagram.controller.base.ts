/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UmlDiagramService } from "../umlDiagram.service";
import { UmlDiagramCreateInput } from "./UmlDiagramCreateInput";
import { UmlDiagram } from "./UmlDiagram";
import { UmlDiagramFindManyArgs } from "./UmlDiagramFindManyArgs";
import { UmlDiagramWhereUniqueInput } from "./UmlDiagramWhereUniqueInput";
import { UmlDiagramUpdateInput } from "./UmlDiagramUpdateInput";

export class UmlDiagramControllerBase {
  constructor(protected readonly service: UmlDiagramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UmlDiagram })
  async createUmlDiagram(
    @common.Body() data: UmlDiagramCreateInput
  ): Promise<UmlDiagram> {
    return await this.service.createUmlDiagram({
      data: {
        ...data,

        topic: data.topic
          ? {
              connect: data.topic,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UmlDiagram] })
  @ApiNestedQuery(UmlDiagramFindManyArgs)
  async umlDiagrams(@common.Req() request: Request): Promise<UmlDiagram[]> {
    const args = plainToClass(UmlDiagramFindManyArgs, request.query);
    return this.service.umlDiagrams({
      ...args,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UmlDiagram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async umlDiagram(
    @common.Param() params: UmlDiagramWhereUniqueInput
  ): Promise<UmlDiagram | null> {
    const result = await this.service.umlDiagram({
      where: params,
      select: {
        createdAt: true,
        diagramContent: true,
        id: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UmlDiagram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUmlDiagram(
    @common.Param() params: UmlDiagramWhereUniqueInput,
    @common.Body() data: UmlDiagramUpdateInput
  ): Promise<UmlDiagram | null> {
    try {
      return await this.service.updateUmlDiagram({
        where: params,
        data: {
          ...data,

          topic: data.topic
            ? {
                connect: data.topic,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          diagramContent: true,
          id: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UmlDiagram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUmlDiagram(
    @common.Param() params: UmlDiagramWhereUniqueInput
  ): Promise<UmlDiagram | null> {
    try {
      return await this.service.deleteUmlDiagram({
        where: params,
        select: {
          createdAt: true,
          diagramContent: true,
          id: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
