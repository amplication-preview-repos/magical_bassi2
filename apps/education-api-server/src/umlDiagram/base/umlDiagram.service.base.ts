/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UmlDiagram as PrismaUmlDiagram,
  Topic as PrismaTopic,
} from "@prisma/client";

export class UmlDiagramServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UmlDiagramCountArgs, "select">
  ): Promise<number> {
    return this.prisma.umlDiagram.count(args);
  }

  async umlDiagrams(
    args: Prisma.UmlDiagramFindManyArgs
  ): Promise<PrismaUmlDiagram[]> {
    return this.prisma.umlDiagram.findMany(args);
  }
  async umlDiagram(
    args: Prisma.UmlDiagramFindUniqueArgs
  ): Promise<PrismaUmlDiagram | null> {
    return this.prisma.umlDiagram.findUnique(args);
  }
  async createUmlDiagram(
    args: Prisma.UmlDiagramCreateArgs
  ): Promise<PrismaUmlDiagram> {
    return this.prisma.umlDiagram.create(args);
  }
  async updateUmlDiagram(
    args: Prisma.UmlDiagramUpdateArgs
  ): Promise<PrismaUmlDiagram> {
    return this.prisma.umlDiagram.update(args);
  }
  async deleteUmlDiagram(
    args: Prisma.UmlDiagramDeleteArgs
  ): Promise<PrismaUmlDiagram> {
    return this.prisma.umlDiagram.delete(args);
  }

  async getTopic(parentId: string): Promise<PrismaTopic | null> {
    return this.prisma.umlDiagram
      .findUnique({
        where: { id: parentId },
      })
      .topic();
  }
}
